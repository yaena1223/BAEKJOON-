import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class dfsì™€bfs {
	static ArrayList<ArrayList<Integer>>array ;
	static boolean [] visited;
	static boolean [] visited2;
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		st =new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int v = Integer.parseInt(st.nextToken());
		int a;
		int b;
		Queue<Integer>queue  = new LinkedList();
		array = new ArrayList<ArrayList<Integer>>();
		for(int i = 0;i<=n;i++) {
			array.add(new ArrayList<Integer>());
		}
		for(int i = 0;i<m;i++) {
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			array.get(a).add(b);
			array.get(b).add(a);
		}
		for(int i = 1;i<=n;i++) {
			Collections.sort(array.get(i));
		}
		visited = new boolean[n+1];
		visited2= new boolean[n+1];
		dfs(v);
		System.out.println();
		queue.offer(v);
		visited2[v] = true;
		while(!queue.isEmpty()) {
			int num = queue.poll();
			System.out.print(num+" ");
			for(int y:array.get(num)) {
				if(!visited2[y]) {
					queue.offer(y);
					visited2[y] = true;
				}
			}
		}
		
	}

	static void dfs(int x) {
		System.out.print(x+" ");
		visited[x] = true;
		
		for(int y : array.get(x)) {
			if(!visited[y])dfs(y);
			
		}
		
	}

}
